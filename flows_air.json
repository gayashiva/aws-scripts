[
    {
        "id": "air-dashboard-tab",
        "type": "tab",
        "label": "AIR Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "air-ui-tab",
        "type": "ui_tab",
        "name": "AIR Dashboard",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "air-control-group",
        "type": "ui_group",
        "name": "Controls",
        "tab": "air-ui-tab",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "air-status-group",
        "type": "ui_group",
        "name": "System Status",
        "tab": "air-ui-tab",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "air-sensors-group",
        "type": "ui_group",
        "name": "Sensor Readings",
        "tab": "air-ui-tab",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "air-mqtt-broker",
        "type": "mqtt-broker",
        "name": "AWS Mosquitto",
        "broker": "44.194.157.172",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "air-data-subscriber",
        "type": "mqtt in",
        "z": "air-dashboard-tab",
        "name": "AIR Data Subscriber",
        "topic": "air/+/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "air-mqtt-broker",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 80,
        "wires": [
            [
                "air-parse-data"
            ]
        ]
    },
    {
        "id": "air-status-subscriber",
        "type": "mqtt in",
        "z": "air-dashboard-tab",
        "name": "AIR Status Subscriber",
        "topic": "air/+/status",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "air-mqtt-broker",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "air-parse-status"
            ]
        ]
    },
    {
        "id": "air-error-subscriber",
        "type": "mqtt in",
        "z": "air-dashboard-tab",
        "name": "AIR Error Subscriber",
        "topic": "air/+/error",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "air-mqtt-broker",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 200,
        "wires": [
            [
                "air-parse-error"
            ]
        ]
    },
    {
        "id": "air-parse-data",
        "type": "function",
        "z": "air-dashboard-tab",
        "name": "Parse Sensor Data",
        "func": "try {\n    // Convert string payload to JSON if needed\n    let data = msg.payload;\n    if (typeof data === 'string') {\n        data = JSON.parse(data);\n    }\n\n    // Process sensor values\n    const parsed = {\n        timestamp: data.timestamp || \"N/A\",\n        counter: Number(data.counter) || 0,\n        temperature: Math.round(Number(data.temperature) * 100) / 100 || 0,\n        pressure: Math.round(Number(data.pressure) * 100) / 100 || 0,\n        water_temp: Math.round(Number(data.water_temp) * 100) / 100 || 0,\n        voltage: Math.round(Number(data.voltage) * 100) / 100 || 0\n    };\n\n    // Extract site from topic (air/<site>/data)\n    const topicParts = msg.topic.split('/');\n    parsed.site = topicParts[1] || \"unknown\";\n\n    node.warn(\"Parsed AIR data: \" + JSON.stringify(parsed));\n\n    msg.payload = parsed;\n    return msg;\n} catch (e) {\n    node.error(\"Parser error: \" + e.message, msg);\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "air-route-data"
            ]
        ]
    },
    {
        "id": "air-parse-status",
        "type": "function",
        "z": "air-dashboard-tab",
        "name": "Parse Status Data",
        "func": "try {\n    let data = msg.payload;\n    if (typeof data === 'string') {\n        data = JSON.parse(data);\n    }\n\n    const statusInfo = {\n        timestamp: data.timestamp || \"N/A\",\n        uptime: data.uptime || \"N/A\",\n        free_heap: data.free_heap || 0,\n        valve_state: data.valve_state || \"Unknown\",\n        counter: data.counter || 0,\n        error_condition: data.error_condition || false,\n        imsi: data.imsi || \"N/A\"\n    };\n\n    // Extract site from topic\n    const topicParts = msg.topic.split('/');\n    statusInfo.site = topicParts[1] || \"unknown\";\n\n    flow.set('lastStatus', statusInfo);\n    node.warn(\"Status received: \" + JSON.stringify(statusInfo));\n\n    msg.payload = statusInfo;\n    return msg;\n} catch (e) {\n    node.error(\"Status parser error: \" + e.message, msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "air-status-display",
                "air-error-indicator"
            ]
        ]
    },
    {
        "id": "air-parse-error",
        "type": "function",
        "z": "air-dashboard-tab",
        "name": "Parse Error Data",
        "func": "try {\n    let data = msg.payload;\n    if (typeof data === 'string') {\n        data = JSON.parse(data);\n    }\n\n    const errorInfo = {\n        message: data.message || \"No error message\",\n        timestamp: data.timestamp || \"N/A\",\n        site: data.site || \"Unknown\"\n    };\n\n    flow.set('lastError', errorInfo);\n    node.warn(\"Error received: \" + errorInfo.message);\n\n    msg.payload = errorInfo;\n    return msg;\n} catch (e) {\n    node.error(\"Error parser error: \" + e.message, msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            [
                "air-error-display"
            ]
        ]
    },
    {
        "id": "air-route-data",
        "type": "function",
        "z": "air-dashboard-tab",
        "name": "Route Sensor Data",
        "func": "const data = msg.payload;\n\nreturn [\n    { payload: data.temperature },\n    { payload: data.pressure },\n    { payload: data.water_temp },\n    { payload: data.voltage },\n    msg\n];",
        "outputs": 5,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 80,
        "wires": [
            [
                "air-temp-display"
            ],
            [
                "air-pressure-display"
            ],
            [
                "air-water-temp-display"
            ],
            [
                "air-voltage-display"
            ],
            [
                "air-timestamp-display"
            ]
        ]
    },
    {
        "id": "air-site-input",
        "type": "ui_text_input",
        "z": "air-dashboard-tab",
        "name": "Site Name Input",
        "label": "Site Name:",
        "tooltip": "Enter the AIR site name",
        "group": "air-control-group",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "air-store-site"
            ]
        ]
    },
    {
        "id": "air-store-site",
        "type": "function",
        "z": "air-dashboard-tab",
        "name": "Store Selected Site",
        "func": "flow.set('selectedSite', msg.payload);\nnode.warn('AIR site changed to: ' + msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "air-data-button",
        "type": "ui_button",
        "z": "air-dashboard-tab",
        "name": "Request Data",
        "group": "air-control-group",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "🔄 Request Data",
        "tooltip": "Request immediate sensor data",
        "color": "white",
        "bgcolor": "#2196F3",
        "className": "",
        "icon": "",
        "payload": "data",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "air-build-command"
            ]
        ]
    },
    {
        "id": "air-status-button",
        "type": "ui_button",
        "z": "air-dashboard-tab",
        "name": "Request Status",
        "group": "air-control-group",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "📊 Request Status",
        "tooltip": "Request system status",
        "color": "white",
        "bgcolor": "#4CAF50",
        "className": "",
        "icon": "",
        "payload": "status",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 140,
        "y": 400,
        "wires": [
            [
                "air-build-command"
            ]
        ]
    },
    {
        "id": "air-demo-button",
        "type": "ui_button",
        "z": "air-dashboard-tab",
        "name": "Demo Mode",
        "group": "air-control-group",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "🎬 Demo",
        "tooltip": "Run demo mode",
        "color": "white",
        "bgcolor": "#9C27B0",
        "className": "",
        "icon": "",
        "payload": "demo",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "air-build-command"
            ]
        ]
    },
    {
        "id": "air-reboot-button",
        "type": "ui_button",
        "z": "air-dashboard-tab",
        "name": "Reboot",
        "group": "air-control-group",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "🔄 Reboot",
        "tooltip": "Reboot system (WARNING!)",
        "color": "white",
        "bgcolor": "#F44336",
        "className": "",
        "icon": "",
        "payload": "reboot",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "air-build-command"
            ]
        ]
    },
    {
        "id": "air-build-command",
        "type": "function",
        "z": "air-dashboard-tab",
        "name": "Build Command Topic",
        "func": "const selectedSite = flow.get('selectedSite') || 'Test';\nmsg.topic = `air/${selectedSite}/command`;\n\nnode.warn(\"AIR command: \" + msg.payload + \" to \" + msg.topic);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 440,
        "wires": [
            [
                "air-command-publisher"
            ]
        ]
    },
    {
        "id": "air-command-publisher",
        "type": "mqtt out",
        "z": "air-dashboard-tab",
        "name": "AIR Command Publisher",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "air-mqtt-broker",
        "x": 620,
        "y": 440,
        "wires": []
    },
    {
        "id": "air-temp-display",
        "type": "ui_template",
        "z": "air-dashboard-tab",
        "group": "air-sensors-group",
        "name": "Temperature Display",
        "order": 1,
        "width": 6,
        "height": 2,
        "format": "<div class=\"sensor-display temp\">\n  <div class=\"sensor-label\">Temperature</div>\n  <div class=\"sensor-value\">{{msg.payload | number:1}}<span class=\"unit\">°C</span></div>\n</div>\n\n<style>\n.sensor-display {\n  background: #2d3748;\n  border-radius: 8px;\n  padding: 15px 20px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border-left: 4px solid #2196f3;\n  box-sizing: border-box;\n  margin: 4px;\n  min-height: 60px;\n}\n.sensor-label {\n  color: #a0aec0;\n  font-size: 12px;\n  font-weight: 500;\n  margin-bottom: 6px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n}\n.sensor-value {\n  color: #2196f3;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 1;\n}\n.unit {\n  font-size: 16px;\n  margin-left: 4px;\n  opacity: 0.8;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "air-pressure-display",
        "type": "ui_template",
        "z": "air-dashboard-tab",
        "group": "air-sensors-group",
        "name": "Pressure Display",
        "order": 2,
        "width": 6,
        "height": 2,
        "format": "<div class=\"sensor-display pressure\">\n  <div class=\"sensor-label\">Pressure</div>\n  <div class=\"sensor-value\">{{msg.payload | number:2}}<span class=\"unit\">hPa</span></div>\n</div>\n\n<style>\n.sensor-display {\n  background: #2d3748;\n  border-radius: 8px;\n  padding: 15px 20px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border-left: 4px solid #9c27b0;\n  box-sizing: border-box;\n  margin: 4px;\n  min-height: 60px;\n}\n.sensor-label {\n  color: #a0aec0;\n  font-size: 12px;\n  font-weight: 500;\n  margin-bottom: 6px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n}\n.sensor-value {\n  color: #9c27b0;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 1;\n}\n.unit {\n  font-size: 16px;\n  margin-left: 4px;\n  opacity: 0.8;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "air-water-temp-display",
        "type": "ui_template",
        "z": "air-dashboard-tab",
        "group": "air-sensors-group",
        "name": "Water Temp Display",
        "order": 3,
        "width": 6,
        "height": 2,
        "format": "<div class=\"sensor-display water-temp\">\n  <div class=\"sensor-label\">Water Temperature</div>\n  <div class=\"sensor-value\">{{msg.payload | number:1}}<span class=\"unit\">°C</span></div>\n</div>\n\n<style>\n.sensor-display {\n  background: #2d3748;\n  border-radius: 8px;\n  padding: 15px 20px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border-left: 4px solid #00bcd4;\n  box-sizing: border-box;\n  margin: 4px;\n  min-height: 60px;\n}\n.sensor-label {\n  color: #a0aec0;\n  font-size: 12px;\n  font-weight: 500;\n  margin-bottom: 6px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n}\n.sensor-value {\n  color: #00bcd4;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 1;\n}\n.unit {\n  font-size: 16px;\n  margin-left: 4px;\n  opacity: 0.8;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "air-voltage-display",
        "type": "ui_gauge",
        "z": "air-dashboard-tab",
        "name": "System Voltage",
        "group": "air-sensors-group",
        "order": 4,
        "width": 6,
        "height": 3,
        "gtype": "gage",
        "title": "System Voltage",
        "label": "V",
        "format": "{{value | number:1}}",
        "min": 10,
        "max": "14",
        "colors": [
            "#ff9800",
            "#ffb74d",
            "#ffe0b2"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 860,
        "y": 160,
        "wires": []
    },
    {
        "id": "air-timestamp-display",
        "type": "ui_template",
        "z": "air-dashboard-tab",
        "group": "air-sensors-group",
        "name": "Last Update",
        "order": 5,
        "width": 6,
        "height": 1,
        "format": "<div class=\"timestamp-display\">\n  <div class=\"timestamp-label\">Last Update:</div>\n  <div class=\"timestamp-value\">{{msg.payload.timestamp}}</div>\n</div>\n\n<style>\n.timestamp-display {\n  background: #2d3748;\n  border-radius: 8px;\n  padding: 10px 15px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 4px;\n  border-left: 4px solid #4caf50;\n}\n.timestamp-label {\n  color: #a0aec0;\n  font-size: 12px;\n  font-weight: 500;\n  text-transform: uppercase;\n}\n.timestamp-value {\n  color: #4caf50;\n  font-size: 14px;\n  font-weight: 600;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 850,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "air-status-display",
        "type": "ui_template",
        "z": "air-dashboard-tab",
        "group": "air-status-group",
        "name": "Status Info",
        "order": 1,
        "width": 6,
        "height": 3,
        "format": "<div class=\"status-info\">\n  <div class=\"info-row\">\n    <span class=\"info-label\">Uptime:</span>\n    <span class=\"info-value\">{{msg.payload.uptime}}</span>\n  </div>\n  <div class=\"info-row\">\n    <span class=\"info-label\">Valve State:</span>\n    <span class=\"info-value\">{{msg.payload.valve_state}}</span>\n  </div>\n</div>\n\n<style>\n.status-info {\n  background: #2d3748;\n  border-radius: 8px;\n  padding: 10px 15px;\n  margin: 4px;\n  border-left: 4px solid #4caf50;\n}\n.info-row {\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 0;\n}\n.info-label {\n  color: #a0aec0;\n  font-size: 12px;\n  font-weight: 500;\n}\n.info-value {\n  color: #ffffff;\n  font-size: 12px;\n  font-weight: 600;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 850,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "air-error-indicator",
        "type": "ui_template",
        "z": "air-dashboard-tab",
        "group": "air-status-group",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Error Indicator",
        "format": "<div class=\"error-indicator\">\n  <div class=\"indicator-label\">Error Condition:</div>\n  <div class=\"indicator-status\" ng-class=\"{'status-error': msg.payload.error_condition, 'status-ok': !msg.payload.error_condition}\">\n    {{msg.payload.error_condition ? '⚠️ ERROR' : '✓ OK'}}\n  </div>\n</div>\n\n<style>\n.error-indicator {\n  background: #2d3748;\n  border-radius: 8px;\n  padding: 10px 15px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 4px;\n}\n.indicator-label {\n  color: #a0aec0;\n  font-size: 12px;\n  font-weight: 500;\n  text-transform: uppercase;\n}\n.indicator-status {\n  font-size: 14px;\n  font-weight: 700;\n  padding: 4px 12px;\n  border-radius: 4px;\n}\n.status-ok {\n  color: #4caf50;\n  background: rgba(76, 175, 80, 0.2);\n}\n.status-error {\n  color: #f44336;\n  background: rgba(244, 67, 54, 0.2);\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 850,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "air-error-display",
        "type": "ui_template",
        "z": "air-dashboard-tab",
        "group": "air-status-group",
        "name": "Error Messages",
        "order": 3,
        "width": 6,
        "height": 2,
        "format": "<div class=\"error-display\">\n  <div class=\"error-label\">Latest Error:</div>\n  <div class=\"error-message\">{{msg.payload.message || 'No errors'}}</div>\n  <div class=\"error-time\">{{msg.payload.timestamp}}</div>\n</div>\n\n<style>\n.error-display {\n  background: #2d3748;\n  border-radius: 8px;\n  padding: 12px 16px;\n  margin: 4px;\n  border-left: 4px solid #f44336;\n}\n.error-label {\n  color: #a0aec0;\n  font-size: 11px;\n  font-weight: 500;\n  text-transform: uppercase;\n  margin-bottom: 6px;\n}\n.error-message {\n  color: #f44336;\n  font-size: 14px;\n  font-weight: 600;\n  margin-bottom: 4px;\n}\n.error-time {\n  color: #718096;\n  font-size: 11px;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 480,
        "wires": [
            []
        ]
    }
]
